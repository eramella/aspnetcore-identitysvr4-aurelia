{"version":3,"sources":["open-id/open-id-configuration.ts","open-id/open-id-router-configuration-service.ts","open-id/open-id-logger.ts","open-id/open-id.ts","c:/Dev/Github/aspnetcore-identitysvr4-aurelia/src/EMS.Web/node_modules/oidc-client/lib/oidc-client.min.js","c:/Dev/Github/aspnetcore-identitysvr4-aurelia/src/EMS.Web/node_modules/jwt-decode/lib/index.js","c:/Dev/Github/aspnetcore-identitysvr4-aurelia/src/EMS.Web/node_modules/jwt-decode/lib/base64_url_decode.js","c:/Dev/Github/aspnetcore-identitysvr4-aurelia/src/EMS.Web/node_modules/jwt-decode/lib/atob.js"],"names":[],"mappings":"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ACI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAG3B,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QACxC,CAAC;QAEM,uBAAM,GAAb;YACI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAG5B,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QACzC,CAAC;QA9BL;YAAC,8BAAU;;kBAAA;QAoDX,aAAC;IAAD,CAnDA,AAmDC,IAAA;IAIG,cAAM,UAJT;IAWA;;ACnFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"open-id-bundle.js","sourcesContent":["import { UserManagerSettings } from \"oidc-client\";\r\n\r\nexport class OpenIdConfiguration {\r\n    public LoginRedirectModuleId: string = \"login\";\r\n    public LogoutRedirectModuleId: string = \"logout\";\r\n    public UserManagerSettings: UserManagerSettings;\r\n}\r\n\r\n","import { autoinject } from \"aurelia-framework\";\r\nimport { RouterConfiguration, RouteConfig, NavigationInstruction } from \"aurelia-router\";\r\nimport { OpenIdConfiguration } from \"./open-id-configuration\";\r\n\r\n@autoinject\r\nexport class OpenIdRouterConfigurationService {\r\n\r\n    private loginRedirectHandler: Function;\r\n    private logoutRedirectHandler: Function;\r\n\r\n    constructor(private openIdConfiguration: OpenIdConfiguration) { }\r\n\r\n    public ConfigureRouter(\r\n        routerConfiguration: RouterConfiguration,\r\n        loginRedirectHandler: Function,\r\n        logoutRedirectHandler: Function) {\r\n\r\n        // TODO Check whether assigning to this. is necessary for lifetime maintenance.\r\n        this.loginRedirectHandler = loginRedirectHandler;\r\n        this.logoutRedirectHandler = logoutRedirectHandler;\r\n        // END TODO\r\n\r\n        this.addLoginRedirectRoute(routerConfiguration, loginRedirectHandler);\r\n        this.addLogoutRedirectRoute(routerConfiguration, logoutRedirectHandler);\r\n    }\r\n\r\n    private addLogoutRedirectRoute(\r\n        routerConfiguration: RouterConfiguration,\r\n        handler: Function) {\r\n\r\n        let logoutRedirectRoute: RouteConfig = {\r\n            name: \"openIdPostLogoutRedirectRoute\",\r\n            navigationStrategy: (instruction: NavigationInstruction): Promise<any> => {\r\n\r\n                let redirect: Function = () => {\r\n                    instruction.config.moduleId = this.openIdConfiguration.LogoutRedirectModuleId;\r\n                };\r\n\r\n                return handler()\r\n                    .then(redirect)\r\n                    .catch((err) => {\r\n                        redirect();\r\n                        throw err;\r\n                    });\r\n            },\r\n            route: this.getPath(this.openIdConfiguration.UserManagerSettings.post_logout_redirect_uri),\r\n        };\r\n\r\n        routerConfiguration.mapRoute(logoutRedirectRoute);\r\n    }\r\n\r\n    private addLoginRedirectRoute(\r\n        routerConfiguration: RouterConfiguration,\r\n        handler: Function) {\r\n\r\n        let loginRedirectRoute: RouteConfig = {\r\n            name: \"openIdRedirectRoute\",\r\n            navigationStrategy: (instruction: NavigationInstruction): Promise<any> => {\r\n\r\n                let redirect: Function = () => {\r\n                    instruction.config.moduleId = this.openIdConfiguration.LoginRedirectModuleId;\r\n                };\r\n\r\n                return handler()\r\n                    .then(redirect)\r\n                    .catch((err) => {\r\n                        redirect();\r\n                        throw err;\r\n                    });\r\n            },\r\n            route: this.getPath(this.openIdConfiguration.UserManagerSettings.redirect_uri),\r\n        };\r\n\r\n        routerConfiguration.mapRoute(loginRedirectRoute);\r\n    }\r\n\r\n    private getPath(uri: string): string {\r\n        return this.convertUriToAnchor(uri).pathname;\r\n    };\r\n\r\n    // This is here for when we decide also to support hash navigation\r\n    private getHash(uri: string): string {\r\n        return this.convertUriToAnchor(uri).hash;\r\n    }\r\n\r\n    private convertUriToAnchor(uri: string): HTMLAnchorElement {\r\n        let anchor: HTMLAnchorElement = document.createElement(\"a\");\r\n        anchor.href = uri;\r\n        return anchor;\r\n    }\r\n}\r\n","export class OpenIdLogger \r\n{\r\n    public Debug(message: string) {\r\n        console.debug(`DEBUG [openId] ${message}`);\r\n    }\r\n}","import { autoinject, Aurelia} from \"aurelia-framework\";\r\nimport { RouterConfiguration } from \"aurelia-router\";\r\nimport { User, UserManager, UserManagerSettings } from \"oidc-client\";\r\nimport { OpenIdRouterConfigurationService } from \"./open-id-router-configuration-service\";\r\nimport { OpenIdConfiguration } from \"./open-id-configuration\";\r\nimport { OpenIdLogger } from \"./open-id-logger\";\r\n\r\nfunction configure(aurelia: Aurelia, callback: Function) {\r\n\r\n    let logger: OpenIdLogger = aurelia.container.get(OpenIdLogger);\r\n\r\n    callback(function (oidcConfig: OpenIdConfiguration) {\r\n        logger.Debug(\"Configuring the OpenId Connect Client\");\r\n\r\n        let userManagerSettings = oidcConfig.UserManagerSettings;\r\n        aurelia.container.registerInstance(UserManager, new UserManager(userManagerSettings));\r\n        aurelia.container.registerInstance(OpenIdConfiguration, oidcConfig);\r\n    });\r\n}\r\n\r\n@autoinject\r\nclass OpenId {\r\n\r\n    constructor(\r\n        private routerConfigurationService: OpenIdRouterConfigurationService,\r\n        private logger: OpenIdLogger,\r\n        public UserManager: UserManager) { }\r\n\r\n    public Configure(routerConfiguration: RouterConfiguration) {\r\n\r\n        // TODO throw if routerConfiguration is null\r\n        // TODO throw is openIdConfiguration is null (maybe - do we have defaults?)\r\n        this.routerConfigurationService.ConfigureRouter(\r\n            routerConfiguration,\r\n            this.LoginRedirectHandler,\r\n            this.PostLogoutRedirectHandler);\r\n    }\r\n\r\n    public Login() {\r\n        this.logger.Debug(\"Login\");\r\n\r\n        // signinRedirect throws with empty/null data.\r\n        this.UserManager.signinRedirect({});\r\n    }\r\n\r\n    public Logout() {\r\n        this.logger.Debug(\"Logout\");\r\n\r\n        // signoutRedirect throws with empty/null data.\r\n        this.UserManager.signoutRedirect({});\r\n    }\r\n\r\n    // This is public only to facilitate unit testing.\r\n    // And is a lamda to capture the object in `this`.\r\n    public LoginRedirectHandler = (): Promise<any> => {\r\n        this.logger.Debug(\"LoginRedirectHandler\");\r\n        return this.UserManager.getUser().then((user) => {\r\n            // avoid page refresh errors\r\n            if (user === null || user === undefined) {\r\n                this.logger.Debug(`user: ${user}`);\r\n                this.logger.Debug(`window.location.href: ${window.location.href}`);\r\n                return this.UserManager.signinRedirectCallback(null);\r\n            }\r\n        });\r\n    }\r\n\r\n    // This is public only to facilitate unit testing.\r\n    // And is a lamda to capture the object in `this`.\r\n    public PostLogoutRedirectHandler = (): Promise<any> => {\r\n        this.logger.Debug(\"PostLogoutRedirectHandler\");\r\n        return this.UserManager.signoutRedirectCallback(null);\r\n    }\r\n}\r\n\r\nexport {\r\n    configure,\r\n    OpenId,\r\n    OpenIdConfiguration,\r\n    OpenIdLogger,\r\n    OpenIdRouterConfigurationService,\r\n    User,\r\n    UserManager,\r\n    UserManagerSettings\r\n}\r\n",null,null,null,null],"sourceRoot":"..\\..\\src"}