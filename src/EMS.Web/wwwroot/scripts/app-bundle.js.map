{"version":3,"sources":["c:/Dev/Github/aspnetcore-identitysvr4-aurelia/src/EMS.Web/src/app.html","c:/Dev/Github/aspnetcore-identitysvr4-aurelia/src/EMS.Web/src/login.html","app.ts","login.ts","oidc-config.ts","main.ts"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":[null,null,"import { autoinject } from \"aurelia-framework\";\r\nimport { RouterConfiguration, Router } from \"aurelia-router\";\r\nimport { OpenId } from \"./open-id/open-id\";\r\n\r\n@autoinject\r\nexport class App {\r\n\r\n    public openId: OpenId;\r\n\r\n    constructor(openId: OpenId) {\r\n        this.openId = openId;\r\n    }\r\n\r\n    public configureRouter(routerConfiguration: RouterConfiguration, router: Router) {\r\n\r\n        // switch from hash (#) to slash (/) navigation\r\n        //routerConfiguration.options.pushState = true;\r\n\r\n        // configure routes\r\n        routerConfiguration.map([\r\n            { moduleId: \"login\", route: [\"\", \"login\"] },\r\n        ]);\r\n\r\n        this.openId.Configure(routerConfiguration);\r\n    }\r\n}\r\n","import { autoinject } from \"aurelia-framework\";\r\nimport { OpenId, User } from \"./open-id/open-id\";\r\nimport { HttpClient } from \"aurelia-fetch-client\";\r\n\r\n@autoinject\r\nexport class Login {\r\n\r\n    private authorizationServerMessage: string;\r\n    private resourceServerMessage: string;\r\n    private isLoggedIn: boolean = false;\r\n\r\n    constructor(private openId: OpenId, private httpClient: HttpClient) {\r\n        this.openId.UserManager.getUser().then((user: User) => {\r\n\r\n            console.log(user);\r\n            if (user === null || user === undefined) {\r\n                return;\r\n            }\r\n\r\n            console.log(\"logged in\");\r\n            this.isLoggedIn = true;\r\n            this.authorizationServerMessage = JSON.stringify(user, null, 4);\r\n\r\n            console.log(\"login constructor done\");\r\n        });\r\n    }\r\n\r\n    private login() {\r\n        this.openId.Login();\r\n    }\r\n\r\n    private logout() {\r\n        this.openId.Logout();\r\n    }\r\n\r\n    private queryResourceServer(serverNum: number, isPrivate: boolean) {\r\n\r\n        this.openId.UserManager.getUser().then((user: User) => {\r\n\r\n            let url = this.getUrl(serverNum, isPrivate);\r\n\r\n            this.resourceServerMessage = `Fetching ${url}`;\r\n\r\n            let fetchInit = {\r\n                headers: new Headers(),\r\n            };\r\n\r\n            if (user !== null && user !== undefined) {\r\n                fetchInit.headers.append(\"Authorization\", `Bearer ${user.access_token}`);\r\n            }\r\n\r\n            this.httpClient.fetch(url, fetchInit)\r\n                .then((response) => {\r\n                    if (response.ok) {\r\n                        return response.text();\r\n                    } else {\r\n                        return response.statusText;\r\n                    }\r\n                })\r\n                .then((data) => {\r\n                    this.resourceServerMessage = `${serverNum}: ${data}`;\r\n                })\r\n                .catch((err) => {\r\n                    this.resourceServerMessage = `${serverNum}: ${err.message}`;\r\n                });\r\n        });\r\n    }\r\n\r\n    // HACK: Handle different environments and servers\r\n    private getUrl(serverNum: number, isPrivate: boolean) {\r\n        let leftPart: string;\r\n        let path: string;\r\n\r\n        if (window.location.hostname.startsWith(\"localhost\")) {\r\n            leftPart = serverNum === 1\r\n                ? \"http://localhost:5001\"\r\n                : \"http://localhost:5002\";\r\n        } else {\r\n            leftPart = serverNum === 1\r\n                ? \"https://zamboni-resource-01.azurewebsites.net\"\r\n                : \"https://zamboni-resource-02.azurewebsites.net\";\r\n        }\r\n\r\n        path = isPrivate ? \"private\" : \"public\";\r\n\r\n        return `${leftPart}/api/${path}`;\r\n    }\r\n}\r\n","import { OpenIdConfiguration, UserManagerSettings } from \"./open-id/open-id\";\r\n\r\nlet isDevelopment = window.location.host.startsWith(\"localhost\");\r\n\r\nlet authority: string = isDevelopment\r\n    ? \"http://localhost:1861\"\r\n    : \"https://my.mysite.net\";\r\n\r\nlet host: string = isDevelopment\r\n    ? \"http://localhost:1861\"\r\n    : \"https://my.mysite.net\";\r\n\r\nconst oidcConfig: OpenIdConfiguration = {\r\n    LoginRedirectModuleId: \"login\",\r\n    LogoutRedirectModuleId: \"login\",\r\n    UserManagerSettings: <UserManagerSettings>{\r\n        authority: authority,\r\n        client_id: \"ems\",\r\n        post_logout_redirect_uri: `${host}/signout-oidc`,\r\n        redirect_uri: `${host}/index.html`,\r\n        response_type: \"id_token token\",\r\n        scope: \"openid profile api.todo\",\r\n        filterProtocolClaims: true, // TODO What is this?\r\n        loadUserInfo: true,\r\n    }\r\n};\r\n\r\nexport default oidcConfig;\r\n","import { Aurelia } from \"aurelia-framework\";\r\nimport oidcConfig from \"./oidc-config\";\r\n\r\n// Configure Bluebird Promises.\r\n// Note: You may want to use environment-specific configuration.\r\n(<any>Promise).config({\r\n  warnings: {\r\n    wForgottenReturn: false,\r\n  },\r\n});\r\n\r\nexport function configure(aurelia: Aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .plugin(\"./open-id/open-id\", (callback) => callback(oidcConfig));\r\n\r\n  aurelia.use.developmentLogging();\r\n  //aurelia.use.plugin(\"aurelia-testing\");\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n"],"sourceRoot":"..\\..\\src"}